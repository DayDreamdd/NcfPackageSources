@page
@model Senparc.Xncf.AIKernel.Areas.AIKernel.Pages.Index
@{
    ViewData["Title"] = "AIKernel 首页";
    Layout = "_Layout_Vue";
}

@section breadcrumbs{
    <el-breadcrumb-item>扩展模块</el-breadcrumb-item>
    <el-breadcrumb-item>AI 核心模块</el-breadcrumb-item>
    <el-breadcrumb-item>首页</el-breadcrumb-item>
}

<div>
    <el-container>
        <el-header class="module-header">
            <span class="start-title"> <i class="fa fa-dot-circle-o"></i>&nbsp;<span class="module-header-v">首页</span></span>
        </el-header>

        <!-- 此处也可以加 SideMenu -->
        @*<el-aside width="200px">
            <el-menu background-color="#304156" default-active="1"
                        text-color="#bfcbd9" active-text-color="#409eff">
                @(await Html.PartialAsync("_SideMenu"))
            </el-menu>
        </el-aside>*@
        <el-main>
            <div class="d-flex justify-content-between align-items-center">
                <h1>模型列表</h1>
                <el-button type="primary" icon="el-icon-plus" size="mini" @@click="addModel">添加模型</el-button>
            </div>

            <el-table :data="tableData">
                @* ,[Name] *@
                @* ,[Endpoint] *@
                @* ,[AiPlatform] *@
                @* ,[OrganizationId] *@
                @* ,[ApiKey] *@
                @* ,[ApiVersion] *@
                @* ,[Note] *@
                @* ,[MaxToken] *@
                @* ,[Show] *@
                @* ,[Flag] *@
                @* ,[AddTime] *@
                @* ,[LastUpdateTime] *@
                @* ,[TenantId] *@
                @* ,[AdminRemark] *@
                @* ,[Remark] *@
                <el-table-column prop="name" label="名称" width="auto"></el-table-column>
                <el-table-column prop="endpoint" label="Endpoint" width="auto"></el-table-column>
                <el-table-column prop="aiPlatform" label="平台" width="auto"></el-table-column>
                <el-table-column prop="organizationId" label="组织" width="auto"></el-table-column>
                <el-table-column prop="note" label="备注" width="auto"></el-table-column>
                <el-table-column prop="show" label="显示" width="auto"></el-table-column>
                <el-table-column prop="addTime" label="添加时间" width="auto">
                    <template slot-scope="scope">
                        {{ dateformatter(scope.row.addTime) }}
                    </template>
                </el-table-column>
                @* 操作 *@
                <el-table-column label="操作" width="auto">
                    <template slot-scope="scope">
                        <el-button type="primary" size="mini" @@click="editModel(scope.row)">编辑</el-button>
                        <el-button type="danger" size="mini" @@click="deleteModel(scope.row)">删除</el-button>
                    </template>
                </el-table-column>
            </el-table>
            <el-pagination
                @@current-change="handleCurrentChange"
                @@size-change="handleSizeChange"
                :current-page="page.page"
                :page-sizes="[10, 20, 30, 40]"
                :page-size="page.size"
                layout="total, sizes, prev, pager, next, jumper"
                :total="total">
            </el-pagination>
        </el-main>
    </el-container>

    @* dialog for 添加模型 *@
    <el-dialog title="添加模型" :visible.sync="addFormDialogVisible" width="50%">
        @* ,[Name] *@
        @* ,[Endpoint] *@
        @* ,[AiPlatform] *@
        @* ,[OrganizationId] *@

        @* ,[Note] *@
        @* ,[MaxToken] *@
        @* ,[Show] *@
        @* ,[AdminRemark] *@
        @* ,[Remark] *@
        @* show form of above item *@
        <el-form :model="addForm" label-width="120px">
            <el-form-item label="名称">
                <el-input v-model="addForm.name"></el-input>
            </el-form-item>
            <el-form-item label="Endpoint">
                <el-input v-model="addForm.endpoint"></el-input>
            </el-form-item>
            <el-form-item label="平台">
                             <el-select v-model="addForm.aiPlatform" placeholder="请选择">
                                    <el-option label="NeuCharAI" value="4"></el-option>
                                    <el-option label="OpenAI" value="8"></el-option>
                                    <el-option label="AzureOpenAI" value="16"></el-option>
                                <el-option label="HuggingFace" value="32"></el-option>
                                </el-select>
            </el-form-item>
            <el-form-item label="组织">
                <el-input v-model="addForm.organizationId"></el-input>
            </el-form-item>
            @* ,[ApiKey] *@
            <el-form-item label="ApiKey">
                <el-input v-model="addForm.apiKey" type="password"></el-input>
            </el-form-item>

            @* ,[ApiVersion] *@
            <el-form-item label="ApiVersion">
                <el-input v-model="addForm.apiVersion"></el-input>
            </el-form-item>
            <el-form-item label="备注">
                <el-input v-model="addForm.note"></el-input>
            </el-form-item>
            <el-form-item label="显示">
                @* use switch *@
                <el-switch v-model="addForm.show"></el-switch>
            </el-form-item>
            @* ,[MaxToken] *@
            @* ,[AdminRemark] *@
            @* ,[Remark] *@
            <el-form-item label="MaxToken">
                <el-input v-model="addForm.maxToken"></el-input>
            </el-form-item>
            <el-form-item label="AdminRemark">
                <el-input v-model="addForm.adminRemark"></el-input>
            </el-form-item>
            <el-form-item label="Remark">
                <el-input v-model="addForm.remark"></el-input>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button @@click="addFormDialogVisible = false">取 消</el-button>
            <el-button type="primary" @@click="addModelSubmit">确 定</el-button>
        </span>
    </el-dialog>
    @* dialog for 编辑模型 *@
    <el-dialog title="编辑模型" :visible.sync="editFormDialogVisible" width="50%">
        @* ,[Name] *@
        @* ,[Endpoint] *@
        @* ,[AiPlatform] *@
        @* ,[OrganizationId] *@

        @* ,[Note] *@
        @* ,[MaxToken] *@
        @* ,[Show] *@
        @* ,[AdminRemark] *@
        @* ,[Remark] *@
        @* show form of above item *@
        <el-form :model="editForm" label-width="120px">
            <el-form-item label="名称">
                <el-input v-model="editForm.name"></el-input>
            </el-form-item>
            <el-form-item label="Endpoint">
                <el-input v-model="editForm.endpoint"></el-input>
            </el-form-item>
            <el-form-item label="平台">
                   @* NeuCharAI = 4, *@
                   @*  OpenAI = 8, *@
                   @*  AzureOpenAI = 16, *@
                   @*  HuggingFace = 32 *@
                   @* <el-input type="number" v-model="editForm.aiPlatform"></el-input> *@
                   @* use el-select *@
                <el-select v-model="editForm.aiPlatform" placeholder="请选择">
                    <el-option label="NeuCharAI" value="4"></el-option>
                    <el-option label="OpenAI" value="8"></el-option>
                    <el-option label="AzureOpenAI" value="16"></el-option>
                <el-option label="HuggingFace" value="32"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="组织">
                <el-input v-model="editForm.organizationId"></el-input>
            </el-form-item>
            @* ,[ApiKey] *@
            <el-form-item label="ApiKey">
                <el-input v-model="editForm.apiKey" type="password"></el-input>
            </el-form-item>

            @* ,[ApiVersion] *@
            <el-form-item label="ApiVersion">
                <el-input v-model="editForm.apiVersion"></el-input>
            </el-form-item>
            <el-form-item label="备注">
                <el-input v-model="editForm.note"></el-input>
            </el-form-item>
            <el-form-item label="显示">
                @* use switch *@
                <el-switch v-model="editForm.show"></el-switch>
            </el-form-item>
            @* ,[MaxToken] *@
            @* ,[AdminRemark] *@
            @* ,[Remark] *@
            <el-form-item label="MaxToken">
                <el-input v-model="editForm.maxToken"></el-input>
            </el-form-item>
            <el-form-item label="AdminRemark">
                <el-input v-model="editForm.adminRemark"></el-input>
            </el-form-item>
            <el-form-item label="Remark">
                <el-input v-model="editForm.remark"></el-input>
            </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
            <el-button @@click="editFormDialogVisible = false">取 消</el-button>
            <el-button type="primary" @@click="editModelSubmit">确 定</el-button>
        </span>
    </el-dialog>
</div>


@section scripts{

    <script>
        var app=new Vue({
            el: "#app",
            data(){
                return {
                    page:{
                        page:1,
                        size:10
                    },
                    tableData: [],
                    addFormDialogVisible: false,
                    addForm:{
                       "name": "",
                       "endpoint": "",
                       "aiPlatform": '4',
                       "organizationId": "",
                       "apiKey": "",
                       "apiVersion": "",
                       "note": "",
                       "maxToken": 0,
                       "show": true
                    },
                    editFormDialogVisible: false,
                    editForm:{
                       "name": "",
                       "endpoint": "",
                       "aiPlatform": '4',
                       "organizationId": "",
                       "apiKey": "",
                       "apiVersion": "",
                       "note": "",
                       "maxToken": 0,
                       "show": true
                    },
                    total:0
                  
                }
            },
            async mounted () {
                //wait for page rendered then init
                setTimeout(async ()=>{
                    await this.init();
                },3000)
            },
            methods:{
                async init(){
                    await this.getDataList();
                },
                handleSizeChange(val) {
                    this.page.size=val;
                    this.getDataList();
                },
                handleCurrentChange(val) {
                    this.page.page=val;
                    this.getDataList();
                },
                async getDataList(){
                    //todo get data from api
                    // /api/Senparc.Xncf.AIKernel/AIModelAppService/Xncf.AIKernel_AIModelAppService.GetListAsync'
                    await service.post('/api/Senparc.Xncf.AIKernel/AIModelAppService/Xncf.AIKernel_AIModelAppService.GetListAsync',{
                          "page": this.page.page,
                          "size": this.page.size,
                    })
                    .then(res=>{
                        console.log(res)
                        this.tableData=res.data.data.data;
                        this.total=res.data.data.total;
                    })
                },    
                addModel(){
                    this.addFormDialogVisible = true;
                },
                async addModelSubmit(){
                    this.addForm.aiPlatform = parseInt(this.addForm.aiPlatform)
                    this.addForm.maxToken = parseInt(this.addForm.maxToken)
                    await service.post('/api/Senparc.Xncf.AIKernel/AIModelAppService/Xncf.AIKernel_AIModelAppService.CreateAsync',
                        {...this.addForm}
                    ).then(res=>{
                            this.$message({
                                     type: res.data.success?'success':'error',
                                     message: res.data.success?'添加成功!':'添加失败'
                            });
                            this.getDataList()
                            this.clearAddForm()
                            this.addFormDialogVisible = false;
                    })
                   
                },
                clearAddForm(){
                    this.addForm={
                       "name": "",
                       "endpoint": "",
                       "aiPlatform": '4',
                       "organizationId": "",
                       "apiKey": "",
                       "apiVersion": "",
                       "note": "",
                       "maxToken": 0,
                       "show": true
                    }
                },
                clearEditForm(){
                    this.editForm={
                        "name": "",
                       "endpoint": "",
                       "aiPlatform": '4',
                       "organizationId": "",
                       "apiKey": "",
                       "apiVersion": "",
                       "note": "",
                       "maxToken": 0,
                       "show": true
                    }
                },
                async editModelSubmit(){
                    this.editForm.aiPlatform = parseInt(this.addForm.aiPlatform)
                    this.editForm.maxToken = parseInt(this.addForm.maxToken)
                    await service.post('/api/Senparc.Xncf.AIKernel/AIModelAppService/Xncf.AIKernel_AIModelAppService.EditAsync',{
                      ...this.editForm
                    }).then(res=>{
                            this.$message({
                                     type: res.data.success?'success':'error',
                                     message: res.data.success?'添加成功!':'添加失败'
                            });
                            this.clearEditForm()
                            this.getDataList()
                            this.editFormDialogVisible = false;
                    })
                },
                dateformatter(date){
                    return new Date(date).toLocaleString()
                },
                editModel(row){
                    this.editFormDialogVisible = true;
                    this.editForm = row;
                },
                deleteModel(row){
                    this.$confirm(`此操作将永久删除【${row.name}】模型, 是否继续?`, '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(async () => {
                        await service.delete('/api/Senparc.Xncf.AIKernel/AIModelAppService/Xncf.AIKernel_AIModelAppService.DeleteAsync',{
                        params:{
                            id:row.id
                        }    
                       }).then(res=>{
                            this.$message({
                                 type: res.data.success?'success':'error',
                                 message: res.data.success?'删除成功!':'删除失败'
                            });
                       })
                  
                    }).catch(() => {
                        this.$message({
                            type: 'info',
                            message: '已取消删除'
                        });          
                    });
                },
            },
        });
    </script>
}